{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ITEM_WIDTH","ITEM_HEIGHT","ItemDisplay","React","forwardRef","_ref","ref","title","description","imagesrc","concat","react_default","a","createElement","className","alt","src","RowItem","memo","_ref2","id","rowIndex","setRowSize","windowWidth","itemRef","useRef","useEffect","current","getBoundingClientRect","height","Grid_default","item","key","App","infiniteLoaderRef","createRef","listRef","maxWidth","rowSizeMap","index","size","_this","resetAfterIndex","loadNextPage","props","isFetching","loadMore","getItemsPerRow","width","Math","max","floor","getNumberOfRows","itemsAmount","hasMore","arguments","length","undefined","maxItemsPerRow","ceil","getRowHeight","generateIndexesForRow","result","startIndex","i","min","push","handleScroll","_ref3","scrollTop","scrollTo","this","_this2","items","dist_es","onScroll","react_virtualized_auto_sizer_dist_index_esm","_ref4","rowCount","rowRenderer","_ref5","style","itemsToRender","map","App_RowItem","dist_index_esm","threshold","isItemLoaded","itemCount","loadMoreItems","_ref6","onItemsRendered","index_esm","estimatedItemSize","itemSize","Component","connect","state","dispatch","type","createItems","numberToCreate","randomNum","random","Array","from","v","k","newId","uuid","toString","faker","lorem","sentences","sentence","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","store","createStore","combineReducers","action","Object","toConsumableArray","payload","applyMiddleware","run","action$","pipe","ofType","delay","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b71b105f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport { VariableSizeList as List } from \"react-window\";\r\nimport InfiniteLoader from \"react-window-infinite-loader\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\nimport { WindowScroller } from \"react-virtualized\";\r\n\r\nconst ITEM_WIDTH = 275;\r\nconst ITEM_HEIGHT = 200;\r\n\r\nconst ItemDisplay = React.forwardRef(({ title, description }, ref) => {\r\n  const imagesrc = `//via.placeholder.com/90x90.png?text=${title}`;\r\n\r\n  return (\r\n    <div ref={ref} className=\"item\">\r\n      <span>{title}</span>\r\n      <img alt={title} src={imagesrc} />\r\n      <span>{description}</span>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst RowItem = React.memo(function RowItem({\r\n  title,\r\n  description,\r\n  id,\r\n  rowIndex,\r\n  setRowSize,\r\n  windowWidth\r\n}) {\r\n  const itemRef = React.useRef();\r\n\r\n  useEffect(() => {\r\n    setRowSize(rowIndex, itemRef.current.getBoundingClientRect().height);\r\n  }, [windowWidth]);\r\n\r\n  return (\r\n    <div className=\"bordered\">\r\n      <Grid item key={id} className={\"mui-grid-item\"}>\r\n        <ItemDisplay ref={itemRef} title={title} description={description} />\r\n      </Grid>\r\n    </div>\r\n  );\r\n});\r\n\r\nclass App extends Component {\r\n  infiniteLoaderRef = React.createRef();\r\n  listRef = React.createRef();\r\n  maxWidth = 0;\r\n\r\n  rowSizeMap = {};\r\n\r\n  setRowSize = (index, size) => {\r\n    // console.log(\"setting\", index, size);\r\n    if (this.rowSizeMap[index]) {\r\n      if (this.rowSizeMap[index] < size) {\r\n        this.rowSizeMap[index] = size;\r\n        this.listRef.current.resetAfterIndex(index); //https://react-window.now.sh/#/api/VariableSizeList\r\n      }\r\n    } else {\r\n      this.rowSizeMap[index] = size;\r\n      this.listRef.current.resetAfterIndex(index);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    //load first set\r\n    this.props.loadMore();\r\n  }\r\n\r\n  loadNextPage = () => {\r\n    if (!this.props.isFetching) {\r\n      this.props.loadMore();\r\n    }\r\n  };\r\n\r\n  getItemsPerRow = width => {\r\n    return Math.max(Math.floor(width / ITEM_WIDTH), 1);\r\n  };\r\n\r\n  getNumberOfRows = (width, itemsAmount, hasMore = true) => {\r\n    const maxItemsPerRow = this.getItemsPerRow(width);\r\n\r\n    // If there are more items to be loaded then add an extra row to hold a loading indicator.\r\n    return Math.ceil(itemsAmount / maxItemsPerRow) + (hasMore ? 1 : 0);\r\n  };\r\n\r\n  getRowHeight = index => {\r\n    return this.rowSizeMap[index] || ITEM_HEIGHT;\r\n  };\r\n\r\n  generateIndexesForRow = (rowIndex, maxItemsPerRow, itemsAmount) => {\r\n    const result = [];\r\n    const startIndex = rowIndex * maxItemsPerRow;\r\n\r\n    for (\r\n      let i = startIndex;\r\n      i < Math.min(startIndex + maxItemsPerRow, itemsAmount);\r\n      i++\r\n    ) {\r\n      result.push(i);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  //hack to use react virtualized window scroller with react window\r\n  handleScroll = ({ scrollTop }) => {\r\n    if (this.listRef.current) {\r\n      this.listRef.current.scrollTo(scrollTop);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { items } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <WindowScroller onScroll={this.handleScroll}>\r\n          {() => null}\r\n        </WindowScroller>\r\n        <AutoSizer>\r\n          {({ height, width }) => {\r\n            this.maxWidth = width;\r\n            const rowCount = this.getNumberOfRows(width, items.length, true);\r\n\r\n            const rowRenderer = ({ index, style }) => {\r\n              const { items } = this.props;\r\n              const maxItemsPerRow = this.getItemsPerRow(width);\r\n\r\n              const itemsToRender = this.generateIndexesForRow(\r\n                index,\r\n                maxItemsPerRow,\r\n                items.length\r\n              ).map(index => items[index]);\r\n\r\n              return (\r\n                <div style={style} className={\"mui-row\"}>\r\n                  {itemsToRender.map(item => (\r\n                    <RowItem\r\n                      windowWidth={width}\r\n                      rowIndex={index}\r\n                      setRowSize={this.setRowSize}\r\n                      key={item.id}\r\n                      id={item.id}\r\n                      title={item.title}\r\n                      description={item.description}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              );\r\n            };\r\n\r\n            return (\r\n              <InfiniteLoader\r\n                threshold={5}\r\n                isItemLoaded={index => {\r\n                  const { items } = this.props;\r\n                  const maxItemsPerRow = this.getItemsPerRow(width);\r\n                  const allItemsLoaded =\r\n                    this.generateIndexesForRow(\r\n                      index,\r\n                      maxItemsPerRow,\r\n                      items.length\r\n                    ).length > 0;\r\n              \r\n                  return allItemsLoaded;\r\n                }}\r\n                itemCount={rowCount}\r\n                loadMoreItems={this.loadNextPage}\r\n              >\r\n                {({ onItemsRendered, ref }) => {\r\n                  return (\r\n                    <List\r\n                      className=\"mui-grid\"\r\n                      ref={this.listRef}\r\n                      height={height}\r\n                      itemCount={rowCount}\r\n                      estimatedItemSize={ITEM_HEIGHT}\r\n                      itemSize={this.getRowHeight}\r\n                      onItemsRendered={onItemsRendered}\r\n                      width={width}\r\n                    >\r\n                      {rowRenderer}\r\n                    </List>\r\n                  );\r\n                }}\r\n              </InfiniteLoader>\r\n            );\r\n          }}\r\n        </AutoSizer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: state.items,\r\n    isFetching: state.isFetching\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  loadMore: () =>\r\n    dispatch({\r\n      type: \"LOAD_MORE\"\r\n    })\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers, compose } from \"redux\";\nimport { createEpicMiddleware, ofType } from \"redux-observable\";\nimport { delay, map } from \"rxjs/operators\";\nimport uuid from \"uuidv4\";\nimport faker from \"faker\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n/** generate whole number inclusive */\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst createItems = (numberToCreate = 30) => {\n  const randomNum = getRandomInt(0, 1);\n\n  const newItems = Array.from({ length: numberToCreate }, (v, k) => {\n    const newId = uuid().toString() + (Math.random() * 100).toString();\n    return {\n      id: newId,\n      title: `title-${newId}`,\n      description: randomNum ? faker.lorem.sentences() : faker.lorem.sentence()\n    };\n  });\n\n  return newItems;\n};\n\nconst initialState = [];\n\nconst items = (state = initialState, action) => {\n  switch (action.type) {\n    case \"MORE_LOADED\":\n      return [...state, ...action.payload.items];\n    default:\n      return state;\n  }\n};\n\n//if needed, don't load more until previous fetch request completed\nconst isFetching = (state = false, action) => {\n  switch (action.type) {\n    case \"LOAD_MORE\":\n      return true;\n    case \"MORE_LOADED\":\n      return false;\n    default:\n      return state;\n  }\n};\n\nconst rootEpic = action$ =>\n  action$.pipe(\n    ofType(\"LOAD_MORE\"),\n    delay(Math.floor(Math.random() * 301 + 200)), // Asynchronously wait then continue\n    //use switchmap/mergemap - in real world scenario, could use observable.ajax that is cancelable\n    map(action => {\n      return {\n        type: \"MORE_LOADED\",\n        payload: {\n          items: createItems()\n        }\n      };\n    })\n  );\n\n//to use with Chrome redux dev tool\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst epicMiddleware = createEpicMiddleware();\n\nconst store = createStore(\n  combineReducers({ items, isFetching }),\n  {}, //initial state\n  composeEnhancers(applyMiddleware(epicMiddleware))\n);\n\nepicMiddleware.run(rootEpic);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}